import {Injectable} from '@angular/core';
import {Question} from "../shared/question.model";
import {QuestionComplexity} from "../shared/question-complexity.enum";
import {LifetimeType} from "../shared/lifetime-type.enum";
import {AssessmentType} from "../shared/assessment-type.enum";

@Injectable({
  providedIn: 'root'
})
export class CabinetService {

  names: Map<string, string> = new Map<string, string>();

  constructor() {
    this.names.set('russian', 'Кабинет для реализации предметной области «Русский язык и литература»');
    this.names.set('foreign', 'Кабинет иностранных языков');
  }

  getName(cabinetId: string): string {
    let questions = this.convertQuestions(this.questionTexts, cabinetId);
    console.log(questions);
    return this.names.get(cabinetId);
  }

  private questionTexts = [
    ['1', 'Доска классная / Рельсовая система с классной доской', 'нет', 'Выбор', 'Да/нет'],
    ['2', 'Стол учителя с ящиками для хранения или тумбой', 'нет', 'Выбор', 'Да/нет'],
    ['3', 'Кресло учителя', 'нет', 'Выбор', 'Да/нет'],
    ['4', 'Шкаф для хранения учебных пособий', 'нет', 'Выбор', 'Да/нет'],
    ['5', 'Доска пробковая/Доска магнитно-маркерная', 'нет', 'Выбор', 'Да/нет'],
    ['6', 'Стол ученический', 'Регулируемый по высоте', 'Выбор', 'Штука'],
    ['7', 'Стул ученический', 'Регулируемый по высоте', 'Выбор', 'Штука'],
    ['8', 'Дополнительно в форму записываются имеющееся в наличии оборудование с другими техническими характеристиками, другое оборудование, использующееся в данном кабинете', 'Технические характеристики заполняются самостоятельно', 'Год вводится самостоятельно', 'Штука'],
    ['9', 'Сетевой фильтр', 'нет', 'Выбор', 'Да/нет'],
    ['10', 'Интерактивный программно-аппаратный комплекс мобильный или стационарный (программное обеспечение (ПО), проектор, крепление в комплекте)', 'Интерактивная доска или панель (диагональ не менее 65 дюймов, сенсорный экран, специализированное программное обеспечение)', 'Выбор', 'Да/нет'],
    ['11', 'Компьютер учителя с периферией/ноутбук (лицензионное программное обеспечение (ПО), образовательный контент и система защиты от вредоносной информации, ПО для цифровой лаборатории, с возможностью онлайн опроса)', 'Компьютер или ноутбук (процессор не ниже Core i3, оперативная память объемом не менее 4 Гб, офисный пакет программного обеспечения)', 'Выбор', 'Да/нет'],
    ['12', 'Документ-камера', 'Разрешение: 1920 x 1080, 1080p, фокусировка: авто / ручная', 'Выбор', 'Да/нет'],
    ['13', 'Многофункциональное устройство/принтер', 'Лазерный, цветная печать', 'Выбор', 'Да/нет'],
    ['14', 'Дополнительно в форму записываются имеющиеся в наличии компьютеры, МФУ и др. с другими техническими характеристиками, другое оборудование, использующиеся в данном кабинете', 'Технические характеристики заполняются самостоятельно', 'Год вводится самостоятельно', 'Штука'],
    ['15', '*Вписать программное обеспечение'],
    ['16', 'Дополнительно в форму записываются имеющиеся в наличии компьютеры, МФУ и др. с другими техническими характеристиками, другое оборудование, использующиеся в данном кабинете', 'Технические характеристики заполняются самостоятельно', 'Год вводится самостоятельно', 'Штука'],
    ['17', 'Комплект портретов писателей, литературоведов и лингвистов', 'нет', 'Выбор', 'Да/нет'],
    ['18', 'Словари языковые фундаментальные', 'нет', 'Выбор', 'Да/нет'],
    ['19', 'Словари, справочники, энциклопедии языковые и литературоведческие для учителей и учеников 9-11 классов', 'нет', 'Выбор', 'Да/нет'],
    ['20', 'Словари школьные раздаточные для 5-11 классов', 'нет', 'Выбор', 'Да/нет'],
    ['21', 'Комплект репродукций картин для уроков развития речи и литературы', 'нет', 'Выбор', 'Да/нет'],
    ['22', 'Дополнительно в форму записываются имеющиеся в наличии компьютеры, МФУ и др. с другими техническими характеристиками, другое оборудование, использующиеся в данном кабинете', 'Технические характеристики заполняются самостоятельно', 'Год вводится самостоятельно', 'Штука'],
  ];

  private convertQuestions(questionsTable: string[][], cabinetId: string): Question[] {

    return questionsTable.map(questionRow => this.convertOneQuestion(questionRow, cabinetId));
  }

  private convertOneQuestion(questionRow: string[], cabinetId: string): Question {
    const question = new Question();
    question.id = cabinetId + questionRow[0];
    question.name = questionRow[1];

    if (questionRow.length == 2) {
      question.questionComplexity = QuestionComplexity.COMPLEX;
      return question;
    }
    if (questionRow[2].toLowerCase() !== 'нет')
      question.description = questionRow[2];

    question.lifetimeType = questionRow[3] === 'Выбор' ? LifetimeType.CHOICE : LifetimeType.MANUAL;
    question.assessmentType = questionRow[4].toLowerCase() === 'да/нет' ? AssessmentType.BOOL : AssessmentType.QUANTITY;

    return question;
  }
}
